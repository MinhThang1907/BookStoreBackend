tags:
  - name: Users
    description: Users management
paths:
  /api/auth/register:
    post:
      summary: Register a new user
      operationId: registerUser
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400': { $ref: '#/components/responses/BadRequest' }
        '500': { $ref: '#/components/responses/InternalError' }
  /api/auth/login:
    post:
      summary: Authenticate user and obtain JWT
      operationId: loginUser
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401': { $ref: '#/components/responses/BadRequest' }
        '500': { $ref: '#/components/responses/InternalError' }
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: "60f7c0f7e1d3c8abcdef1234"
        username:
          type: string
          example: "john_doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        roles:
          type: array
          items: { type: string }
          example: ["user"]
      required: [username, email]
    UserRegister:
      type: object
      properties:
        username: { type: string, example: "john_doe" }
        email: { type: string, format: email, example: "john@example.com" }
        password: { type: string, format: password }
      required: [username, email, password]
    UserLogin:
      type: object
      properties:
        username: { type: string, example: "john_doe" }
        password: { type: string, format: password }
      required: [username, password]
    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
    Error:
      type: object
      properties:
        code:
          type: integer
          example: 500
        message:
          type: string
          example: "An unexpected error occurred"
      required:
        - code
        - message
  responses:
    BadRequest:
      description: Invalid request parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []
