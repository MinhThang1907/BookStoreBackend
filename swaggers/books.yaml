tags:
  - name: Books
    description: Books management

paths:
  /api/books:
    get:
      tags:
        - Books
      summary: Retrieve a paginated list of books
      operationId: listBooks
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
          description: Page number (default 1)
        - in: query
          name: size
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: Items per page (default 10)
      responses:
        '200':
          description: Paginated books list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookList'
        '500':
          $ref: '#/components/responses/InternalError'

    post:
      tags:
        - Books
      summary: Create a new book
      operationId: createBook
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookCreate'
      responses:
        '201':
          description: Book created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/books/{bookId}:
    parameters:
      - in: path
        name: bookId
        required: true
        schema:
          type: string
        description: MongoDB ObjectId of the book

    get:
      tags:
        - Books
      summary: Get a single book by ID
      operationId: getBookById
      responses:
        '200':
          description: Book found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

    put:
      tags:
        - Books
      summary: Update an existing book
      operationId: updateBook
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookUpdate'
      responses:
        '200':
          description: Book updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

    delete:
      tags:
        - Books
      summary: Delete a book
      operationId: deleteBook
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Book deleted
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

components:
  schemas:
    Book:
      type: object
      properties:
        _id:
          type: string
          example: "60df6f9e3b1e8a0015f4c123"
        bookName:
          type: string
          description: Tên sách
          example: "Lập trình Javascript"
        bookCover:
          type: string
          description: URL hoặc filename của ảnh bìa
          example: "https://example.com/covers/js.png"
        rating:
          type: number
          format: float
          description: Đánh giá
          example: 4.5
        language:
          type: string
          description: Ngôn ngữ sách
          example: "Eng"
        pageNo:
          type: integer
          description: Số trang
          example: 320
        author:
          type: string
          description: Tác giả
          example: "Douglas Crockford"
        genre:
          type: array
          items:
            type: string
          description: Thể loại
          example: ["Programming", "Web"]
        readed:
          type: string
          description: Lượt đọc (e.g. "12k")
          example: "5k"
        description:
          type: string
          description: Mô tả sách
          example: "Cuốn sách hướng dẫn..."
        backgroundColor:
          type: string
          description: Màu nền hiển thị
          example: "#FFFFFF"
        navTintColor:
          type: string
          description: Màu tint thanh điều hướng
          example: "#000000"
        isBookMark:
          type: boolean
          description: Đánh dấu bookmark
          example: true
        categories:
          type: array
          items:
            type: string
          description: Các category bổ sung
          example: ["Frontend", "ES6"]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    BookCreate:
      type: object
      properties:
        bookName:
          $ref: '#/components/schemas/Book/properties/bookName'
        bookCover:
          $ref: '#/components/schemas/Book/properties/bookCover'
        rating:
          $ref: '#/components/schemas/Book/properties/rating'
        language:
          $ref: '#/components/schemas/Book/properties/language'
        pageNo:
          $ref: '#/components/schemas/Book/properties/pageNo'
        author:
          $ref: '#/components/schemas/Book/properties/author'
        genre:
          $ref: '#/components/schemas/Book/properties/genre'
        readed:
          $ref: '#/components/schemas/Book/properties/readed'
        description:
          $ref: '#/components/schemas/Book/properties/description'
        backgroundColor:
          $ref: '#/components/schemas/Book/properties/backgroundColor'
        navTintColor:
          $ref: '#/components/schemas/Book/properties/navTintColor'
        isBookMark:
          $ref: '#/components/schemas/Book/properties/isBookMark'
        categories:
          $ref: '#/components/schemas/Book/properties/categories'
      required:
        - bookName
        - bookCover

    BookUpdate:
      type: object
      properties:
        bookName:
          type: string
        bookCover:
          type: string
        rating:
          type: number
        language:
          type: string
        pageNo:
          type: integer
        author:
          type: string
        genre:
          type: array
          items:
            type: string
        readed:
          type: string
        description:
          type: string
        backgroundColor:
          type: string
        navTintColor:
          type: string
        isBookMark:
          type: boolean
        categories:
          type: array
          items:
            type: string

    BookList:
      type: object
      properties:
        total:
          type: integer
          example: 100
        page:
          type: integer
          example: 1
        size:
          type: integer
          example: 10
        items:
          type: array
          items:
            $ref: '#/components/schemas/Book'

    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
      required:
        - code
        - message

  responses:
    BadRequest:
      description: Invalid request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []